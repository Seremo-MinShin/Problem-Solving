#include<bits/stdc++.h>
#define INF 1e9
#define MAXV 1005
using namespace std;
using ll = long long;
struct edge{int to, cap, rev;};
vector<edge> G[MAXV];
int darr[MAXV], iter[MAXV];
void add_edge(int from, int to, int cap){
    G[from].push_back({to,cap,G[to].size()});
    G[to].push_back({from,0,G[from].size()-1});
}
void BFS(int a){
    queue<int> q;
    q.push(a); darr[a]=0;
    while(!q.empty()){
        a=q.front(); q.pop();
        for(edge e:G[a]){
            if(e.cap>0&&darr[e.to]<0){
                darr[e.to]=darr[a]+1;
                q.push(e.to);
            }
        }
    }
}
int DFS(int s, int d, int f){
    if(s==d) return f;
    for(int&i=iter[s];i<G[s].size();i++){
        edge&e=G[s][i];
        if(e.cap>0&&darr[e.to]>darr[s]){
            int flow=DFS(e.to,d,min(f,e.cap));
            if(flow>0){
                e.cap-=flow;
                G[e.to][e.rev].cap+=flow;
                return flow;
            }
        }
    }
    return 0;
}
int dinic(int s, int d){
    int ret=0;
    while(1){
        memset(darr,-1,sizeof(darr));
        BFS(s);
        if(darr[d]<0) return ret;
        memset(iter,0,sizeof(iter));
        int f;
        while(f=DFS(s,d,INF)) ret+=f;
    }
}
int T,n,goal;
string s[33];
int cp[33][33];
int point[33];
vector<int> ans;
int main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin>>T;
    while(T--){
        cin>>n; ans.clear();
        for(int i=0;i<n;i++) cin>>s[i];
        for(int i=0;i<n;i++){
            for(int j=0;j<MAXV;j++) G[j].clear();
            memset(cp,-1,sizeof(cp));
            memset(point,0,sizeof(point));
            goal=0;
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(s[j][k]=='1') cp[j][k]=2;
                    else if(s[j][k]=='0') cp[j][k]=0;
                    else if(s[j][k]=='.') cp[j][k]=3;
                    else if(s[j][k]=='x') cp[j][k]=0;
                    else if(s[j][k]=='d') cp[j][k]=1;
                }
            }
            for(int j=0;j<n;j++){
                if(cp[i][j]==3){
                    cp[i][j]=2; cp[j][i]=0;
                }
            }
            //0: source, 1: sink, 1+i: 경기, 901+j: 사람
            // 경기 넘버 = 30*j+k
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(cp[j][k]==3){
                        cp[j][k]=cp[k][j]=0;
                        add_edge(0,1+30*j+k,2);
                        add_edge(1+30*j+k,901+j,2);
                        add_edge(1+30*j+k,901+k,2);
                        goal+=2;
                    }
                    else point[j]+=cp[j][k];
                }
            }
            int tr=1;
            for(int j=0;j<n;j++) if(i!=j) {
                if(point[j]>point[i]){
                    tr=0; break;
                }
                add_edge(901+j,1,point[i]-point[j]);
            }
            if(tr==0) continue;
            if(dinic(0,1)==goal) ans.push_back(i);
        }
        for(int i=0;i<ans.size();i++) cout<<ans[i]+1<<' ';
        cout<<'\n';
    }
}
